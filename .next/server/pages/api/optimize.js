"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/optimize";
exports.ids = ["pages/api/optimize"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Foptimize&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Foptimize.js&middlewareConfigBase64=e30%3D!":
/*!**********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Foptimize&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Foptimize.js&middlewareConfigBase64=e30%3D! ***!
  \**********************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_optimize_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/optimize.js */ \"(api-node)/./pages/api/optimize.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_optimize_js__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_optimize_js__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_optimize_js__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_optimize_js__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/optimize\",\n        pathname: \"/api/optimize\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_optimize_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGb3B0aW1pemUmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyUyRmFwaSUyRm9wdGltaXplLmpzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNFO0FBQzFEO0FBQ29EO0FBQ3BEO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyxtREFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsbURBQVE7QUFDcEM7QUFDTyx3QkFBd0IseUdBQW1CO0FBQ2xEO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVELHFDIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlcy9hcGkvb3B0aW1pemUuanNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgJ2RlZmF1bHQnKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsICdjb25maWcnKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL29wdGltaXplXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvb3B0aW1pemVcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiAnJyxcbiAgICAgICAgZmlsZW5hbWU6ICcnXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Foptimize&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Foptimize.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/optimize.js":
/*!*******************************!*\
  !*** ./pages/api/optimize.js ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _turf_turf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turf/turf */ \"@turf/turf\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_turf_turf__WEBPACK_IMPORTED_MODULE_0__]);\n_turf_turf__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n// Simulated annealing for QUBO (custom, no ml-sa)\nasync function simulatedAnnealingQUBO(Q, n, candidates, budget, maxIter = 10000, T0 = 20, alpha = 0.999) {\n    // Start with no grids\n    let x = Array(n).fill(0);\n    let bestX = x.slice(), bestE = Infinity;\n    let T = T0;\n    // Use the same costPenalty as in handler\n    const costPenalty = 10000 / budget;\n    function energy(x) {\n        let e = 0, cost = 0;\n        for(let i = 0; i < n; i++){\n            if (x[i]) cost += candidates[i].cost;\n            for(let j = 0; j < n; j++)e += Q[i][j] * x[i] * x[j];\n        }\n        if (cost > budget) e += costPenalty * (cost - budget) ** 2;\n        return e;\n    }\n    for(let iter = 0; iter < maxIter; iter++){\n        // Flip a random bit\n        let i = Math.floor(Math.random() * n);\n        let x2 = x.slice();\n        x2[i] = 1 - x2[i];\n        let e1 = energy(x), e2 = energy(x2);\n        if (e2 < e1 || Math.random() < Math.exp((e1 - e2) / T)) {\n            x = x2;\n            if (e2 < bestE) {\n                bestE = e2;\n                bestX = x.slice();\n            }\n        }\n        T *= alpha;\n        if (T < 1e-6) break;\n    }\n    return bestX;\n}\n// NAR (greedy) optimization: pick as many candidates as possible with best energy/cost ratio under budget\nfunction narGreedyBudget(Q, candidates, budget) {\n    // Sort by energy/cost ratio, pick until budget is reached\n    const idxs = candidates.map((c, i)=>i).sort((a, b)=>candidates[b].energy / candidates[b].cost - candidates[a].energy / candidates[a].cost);\n    let total = 0;\n    let selected = [];\n    for (let i of idxs){\n        if (total + candidates[i].cost <= budget) {\n            selected.push(i);\n            total += candidates[i].cost;\n        }\n    }\n    return candidates.map((_, i)=>selected.includes(i) ? 1 : 0);\n}\n// Gurobi QUBO solver (budget constraint)\nasync function gurobiQUBOBudget(Q, candidates, budget) {\n    try {\n        const { spawnSync } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! child_process */ \"child_process\", 23));\n        const fs = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n        const path = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! path */ \"path\", 23));\n        const tmpDir = '/tmp';\n        const quboPath = path.join(tmpDir, `qubo_gurobi_${Date.now()}.json`);\n        const costsPath = path.join(tmpDir, `costs_gurobi_${Date.now()}.json`);\n        fs.writeFileSync(quboPath, JSON.stringify({\n            Q\n        }));\n        fs.writeFileSync(costsPath, JSON.stringify(candidates.map((c)=>c.cost)));\n        const pyPath = path.join(process.cwd(), 'gurobi_optimize.py');\n        const result = spawnSync('python3', [\n            pyPath,\n            '--qubo_file',\n            quboPath,\n            '--budget',\n            String(budget),\n            '--costs_file',\n            costsPath\n        ], {\n            encoding: 'utf-8'\n        });\n        fs.unlinkSync(quboPath);\n        fs.unlinkSync(costsPath);\n        if (result.status !== 0) throw new Error(result.stderr || 'Gurobi failed');\n        const out = result.stdout.trim().split('\\n').pop();\n        const parsed = JSON.parse(out);\n        const x = candidates.map((_, i)=>parsed.selected_indices.includes(i) ? 1 : 0);\n        return x;\n    } catch (e) {\n        throw new Error('Gurobi optimization failed: ' + e.message);\n    }\n}\n// Simulated annealing QUBO solver using Python simanneal\nasync function saPythonQUBO(Q, candidates, budget) {\n    const { spawnSync } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! child_process */ \"child_process\", 23));\n    const fs = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n    const path = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! path */ \"path\", 23));\n    const tmpDir = '/tmp';\n    const quboPath = path.join(tmpDir, `qubo_sa_${Date.now()}.json`);\n    const costsPath = path.join(tmpDir, `costs_sa_${Date.now()}.json`);\n    fs.writeFileSync(quboPath, JSON.stringify({\n        Q\n    }));\n    fs.writeFileSync(costsPath, JSON.stringify(candidates.map((c)=>c.cost)));\n    const pyPath = path.join(process.cwd(), 'sa_optimize.py');\n    const result = spawnSync('python3', [\n        pyPath,\n        '--qubo_file',\n        quboPath,\n        '--budget',\n        String(budget),\n        '--costs_file',\n        costsPath\n    ], {\n        encoding: 'utf-8'\n    });\n    fs.unlinkSync(quboPath);\n    fs.unlinkSync(costsPath);\n    if (result.status !== 0) throw new Error(result.stderr || 'Simulated annealing failed');\n    const out = result.stdout.trim().split('\\n').pop();\n    const parsed = JSON.parse(out);\n    const x = candidates.map((_, i)=>parsed.selected_indices.includes(i) ? 1 : 0);\n    return x;\n}\nasync function handler(req, res) {\n    const { polygon, budget, gridArea, cellSize, country, popCenter, quboOnly, algo } = req.body;\n    if (!polygon || polygon.length !== 4 || !budget || budget <= 0 || gridArea <= 0 || !cellSize || !country || !popCenter) {\n        return res.status(400).json({\n            error: 'Invalid input'\n        });\n    }\n    // Close the polygon\n    const coords = [\n        ...polygon.map((p)=>[\n                p.lng,\n                p.lat\n            ]),\n        [\n            polygon[0].lng,\n            polygon[0].lat\n        ]\n    ];\n    const turfPoly = (0,_turf_turf__WEBPACK_IMPORTED_MODULE_0__.polygon)([\n        coords\n    ]);\n    const totalArea = (0,_turf_turf__WEBPACK_IMPORTED_MODULE_0__.area)(turfPoly); // m^2\n    // Generate candidate grid centers (regular mesh inside polygon)\n    const nCandidates = Math.max(20, Math.floor(budget / cellSize.price) * 5);\n    let candidates = [];\n    const [minLng, minLat, maxLng, maxLat] = [\n        Math.min(...coords.map((c)=>c[0])),\n        Math.min(...coords.map((c)=>c[1])),\n        Math.max(...coords.map((c)=>c[0])),\n        Math.max(...coords.map((c)=>c[1]))\n    ];\n    const steps = Math.ceil(Math.sqrt(nCandidates));\n    for(let i = 0; i < steps; i++){\n        for(let j = 0; j < steps; j++){\n            const lat = minLat + (maxLat - minLat) * (i + 0.5) / steps;\n            const lng = minLng + (maxLng - minLng) * (j + 0.5) / steps;\n            if ((0,_turf_turf__WEBPACK_IMPORTED_MODULE_0__.booleanPointInPolygon)([\n                lng,\n                lat\n            ], turfPoly)) {\n                // Calculate distance to population center (in km)\n                const dist = (0,_turf_turf__WEBPACK_IMPORTED_MODULE_0__.distance)([\n                    lng,\n                    lat\n                ], [\n                    popCenter.lng,\n                    popCenter.lat\n                ], {\n                    units: 'kilometers'\n                });\n                candidates.push({\n                    lat,\n                    lng,\n                    cost: cellSize.price,\n                    energy: cellSize.energy,\n                    dist\n                });\n            }\n        }\n    }\n    if (candidates.length === 0) {\n        return res.status(200).json({\n            grids: []\n        });\n    }\n    // QUBO: minimize installation cost, maximize covered population, with penalties for budget, grid count, and minimum coverage\n    // Q(x) = sum_i C_i x_i - alpha * sum_i P_i x_i + theta (sum_i C_i x_i - B)^2 + mu (sum_i x_i - K)^2 + lambda (M - sum_i P_i x_i)^2\n    const alpha = 1; // trade-off weight for population coverage\n    const theta = 1000; // penalty for budget overflow\n    const mu = 1000; // penalty for grid count\n    const lambda = 1000; // penalty for minimum coverage\n    // User must provide K (max grids) and M (min population to cover) in request, else set defaults\n    const K = req.body.K ?? Math.floor(budget / cellSize.price); // default: max possible\n    const M = req.body.M ?? 0; // default: no minimum\n    // Extract C_i and P_i from candidates\n    const C = candidates.map((c)=>c.cost);\n    const P = candidates.map((c)=>c.pop ?? 1); // fallback: 1 if no pop field\n    // Precompute sums for QUBO\n    const n = candidates.length;\n    const Q = Array.from({\n        length: n\n    }, (_, i)=>Array(n).fill(0));\n    for(let i = 0; i < n; i++){\n        // Linear terms\n        Q[i][i] += C[i];\n        Q[i][i] += theta * C[i] ** 2;\n        Q[i][i] += mu;\n        Q[i][i] += lambda * P[i] ** 2;\n        Q[i][i] -= alpha * P[i];\n        Q[i][i] += -2 * theta * budget * C[i]; // fixed: B -> budget\n        Q[i][i] += -2 * mu * K;\n        Q[i][i] += -2 * lambda * M * P[i];\n    }\n    for(let i = 0; i < n; i++){\n        for(let j = 0; j < n; j++){\n            if (i === j) continue;\n            // Quadratic terms\n            Q[i][j] += 2 * theta * C[i] * C[j];\n            Q[i][j] += 2 * mu;\n            Q[i][j] += 2 * lambda * P[i] * P[j];\n        }\n    }\n    // Add constant terms to Q[0][0] (does not affect optimization, but for completeness)\n    Q[0][0] += theta * budget ** 2 + mu * K ** 2 + lambda * M ** 2;\n    // For quantum: return QUBO and candidates (limit size)\n    if (quboOnly) {\n        const maxCandidates = 1000;\n        if (candidates.length > maxCandidates) {\n            const step = Math.ceil(candidates.length / maxCandidates);\n            const reducedCandidates = candidates.filter((_, i)=>i % step === 0).slice(0, maxCandidates);\n            const reducedQ = reducedCandidates.map((_, i)=>reducedCandidates.map((_, j)=>Q[i * step]?.[j * step] ?? 0));\n            return res.status(200).json({\n                Q: reducedQ,\n                candidates: reducedCandidates,\n                budget\n            });\n        }\n        return res.status(200).json({\n            Q,\n            candidates,\n            budget\n        });\n    }\n    // Simulated annealing and greedy: maximize energy under budget\n    let x;\n    try {\n        if (algo === 'nar') {\n            x = narGreedyBudget(Q, candidates, budget);\n        } else if (algo === 'gurobi') {\n            x = await gurobiQUBOBudget(Q, candidates, budget);\n        } else {\n            x = await simulatedAnnealingQUBO(Q, candidates.length, candidates, budget);\n        }\n    } catch (e) {\n        console.error('Optimization error:', e);\n        return res.status(500).json({\n            error: e.message || e.toString()\n        });\n    }\n    const grids = candidates.filter((c, i)=>x[i]).map((c)=>({\n            lat: c.lat,\n            lng: c.lng,\n            cost: c.cost,\n            energy: c.energy,\n            dist: c.dist\n        }));\n    console.log('Returned grids:', grids.length);\n    res.status(200).json({\n        grids\n    });\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/optimize.js\n");

/***/ }),

/***/ "@turf/turf":
/*!*****************************!*\
  !*** external "@turf/turf" ***!
  \*****************************/
/***/ ((module) => {

module.exports = import("@turf/turf");;

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("child_process");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Foptimize&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Foptimize.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();